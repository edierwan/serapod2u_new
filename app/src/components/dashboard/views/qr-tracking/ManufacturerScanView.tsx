'use client'

import { useState, useEffect, useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Scan, 
  QrCode, 
  Package,
  CheckCircle,
  Trash2,
  Link as LinkIcon,
  RefreshCw,
  ClipboardPaste,
  History,
  TrendingUp,
  Box,
  Target,
  Unlink,
  Download,
  AlertTriangle,
  XOctagon,
  Info
} from 'lucide-react'
import { createClient } from '@/lib/supabase/client'
import { useToast } from '@/components/ui/use-toast'

interface UserProfile {
  id: string
  email: string
  role_code: string
  organization_id: string
  organizations: {
    id: string
    org_name: string
    org_type_code: string
  }
}

interface ManufacturerScanViewProps {
  userProfile: UserProfile
  onViewChange: (view: string) => void
}

interface BatchProgress {
  batch_id: string
  batch_code: string
  order_id: string
  order_no: string
  buyer_org_name: string
  total_master_codes: number
  packed_master_codes: number
  total_unique_codes: number
  packed_unique_codes: number
  planned_unique_codes?: number
  actual_packed_unique_codes?: number
  total_unique_with_buffer?: number
  total_buffer_codes: number
  used_buffer_codes: number
  available_buffer_codes?: number
  master_progress_percentage: number
  unique_progress_percentage: number
  overall_progress_percentage: number
  warehouse_started?: boolean
  warehouse_received_cases?: number
  is_complete: boolean
  latest_scans: any[]
  created_at: string
}

interface ScanHistory {
  id: string
  order_id: string | null
  master_code: string
  case_number: number
  unique_codes_count: number
  scanned_at: string
  batch_code: string
  order_no: string
  status?: string | null
}

type ScanOutcome = 'success' | 'already_scanned' | 'duplicate_session' | 'error'

interface ScanResult {
  outcome: ScanOutcome
  message?: string
}

type PackingMode = 'scan_assign' | 'bulk_generate' | 'plan_import'

interface AutoGeneratedCase {
  master_code: string
  case_number: number
  total_units: number
  created_at: string
}

export default function ManufacturerScanView({ userProfile }: ManufacturerScanViewProps) {
  const [scannedCodes, setScannedCodes] = useState<any[]>([])
  const [masterCode, setMasterCode] = useState('')
  const [qrInput, setQrInput] = useState('')
  const [batchInput, setBatchInput] = useState('')
  const [scanning, setScanning] = useState(false)
  const [linking, setLinking] = useState(false)
  const [unlinking, setUnlinking] = useState<string | null>(null)
  const [selectedOrder, setSelectedOrder] = useState<string>('')
  const [orders, setOrders] = useState<any[]>([])
  const [batchProgress, setBatchProgress] = useState<BatchProgress[]>([])
  const [scanHistory, setScanHistory] = useState<ScanHistory[]>([])
  const [orderScanHistory, setOrderScanHistory] = useState<ScanHistory[]>([])
  const [showBatchInput, setShowBatchInput] = useState(false)
  const [skipCaseValidation, setSkipCaseValidation] = useState(false)
  const [showMasterBatchInput, setShowMasterBatchInput] = useState(false)
  const [masterBatchInput, setMasterBatchInput] = useState('')
  const [batchProcessingActive, setBatchProcessingActive] = useState(false)
  const [batchProcessingProgress, setBatchProcessingProgress] = useState(0)
  const [batchProcessingStatus, setBatchProcessingStatus] = useState('')
  const [batchProcessingMode, setBatchProcessingMode] = useState<'unique-scan' | 'master-link' | null>(null)
  const [batchProcessingSummary, setBatchProcessingSummary] = useState({
    total: 0,
    success: 0,
    duplicates: 0,
    errors: 0
  })
  const [batchOutcomeNotice, setBatchOutcomeNotice] = useState<
    { type: 'duplicate' | 'error' | 'mixed'; message: string } | null
  >(null)
  const [packingMode, setPackingMode] = useState<PackingMode>('scan_assign')
  const [bulkTargetCount, setBulkTargetCount] = useState<number>(0)
  const [bulkGenerating, setBulkGenerating] = useState(false)
  const [recentAutoMasters, setRecentAutoMasters] = useState<AutoGeneratedCase[]>([])
  const [downloadingExcel, setDownloadingExcel] = useState(false)
  const [completingProduction, setCompletingProduction] = useState(false)
  const [selectedMasterForDetail, setSelectedMasterForDetail] = useState<ScanHistory | null>(null)
  const [masterChildCodes, setMasterChildCodes] = useState<any[]>([])
  const [loadingChildCodes, setLoadingChildCodes] = useState(false)
  const { toast } = useToast()
  const supabase = createClient()
  const currentBatchProgress = batchProgress[0]
  const plannedUniqueCount = currentBatchProgress?.planned_unique_codes ?? currentBatchProgress?.total_unique_codes ?? 0
  const actualPackedUniqueCount = currentBatchProgress?.actual_packed_unique_codes ?? currentBatchProgress?.packed_unique_codes ?? 0
  const displayedPackedUniqueCount = currentBatchProgress ? Math.min(actualPackedUniqueCount, plannedUniqueCount) : 0
  const overflowPackedUniqueCount = Math.max(actualPackedUniqueCount - plannedUniqueCount, 0)
  const bufferTotalCount = currentBatchProgress?.total_buffer_codes ?? 0
  const bufferUsedCount = currentBatchProgress?.used_buffer_codes ?? overflowPackedUniqueCount
  const bufferAvailableCount = currentBatchProgress?.available_buffer_codes ?? Math.max(bufferTotalCount - bufferUsedCount, 0)
  const masterPercent = Math.max(0, Math.min(100, currentBatchProgress?.master_progress_percentage ?? 0))
  const uniquePercent = Math.max(
    0,
    Math.min(
      100,
      currentBatchProgress?.unique_progress_percentage ?? (plannedUniqueCount ? (displayedPackedUniqueCount / plannedUniqueCount) * 100 : 0)
    )
  )
  const overallProgressPercent = Math.max(
    0,
    Math.min(
      100,
      currentBatchProgress?.overall_progress_percentage ?? Math.round((masterPercent + uniquePercent) / 2)
    )
  )
  const isWarehouseIntakeStarted = currentBatchProgress?.warehouse_started ?? false
  const isOrderLocked = isWarehouseIntakeStarted

  useEffect(() => {
    console.info('[ManufacturerScan] Warehouse lock status', {
      orderId: currentBatchProgress?.order_id ?? currentBatchProgress?.batch_id ?? null,
      warehouseStarted: isWarehouseIntakeStarted,
      isOrderLocked
    })
  }, [currentBatchProgress?.order_id, currentBatchProgress?.batch_id, isWarehouseIntakeStarted, isOrderLocked])
  const packingModeOptions: Array<{ id: PackingMode; title: string; description: string; icon: typeof Scan }> = [
    {
      id: 'scan_assign',
      title: 'Mode A · Scan & Assign',
      description: 'Scan unique QR codes and immediately link them to an existing master case.',
      icon: Scan
    },
    {
      id: 'bulk_generate',
      title: 'Mode B · Bulk Capture → Auto Case',
      description: 'Capture unique codes first, then auto-create a new master case when targets are met.',
      icon: Package
    },
    {
      id: 'plan_import',
      title: 'Mode C · Import Packing Plan',
      description: 'Paste an Excel export to auto-assign master cases from a planned mapping.',
      icon: ClipboardPaste
    }
  ]
  const expectedUnitsPerCase = useMemo(() => {
    if (!currentBatchProgress) return 0
    if (currentBatchProgress.total_master_codes === 0) return 0
    return Math.round(
      currentBatchProgress.total_unique_codes / Math.max(currentBatchProgress.total_master_codes, 1)
    )
  }, [currentBatchProgress])

  const batchOutcomeVisuals: Record<
    'duplicate' | 'error' | 'mixed',
    {
      icon: typeof AlertTriangle
      title: string
      container: string
      iconClass: string
    }
  > = {
    duplicate: {
      icon: AlertTriangle,
      title: 'Duplicate QR codes skipped',
      container: 'border-amber-300 bg-amber-50 text-amber-900',
      iconClass: 'text-amber-600'
    },
    error: {
  icon: XOctagon,
      title: 'Codes not linked to this order',
      container: 'border-rose-300 bg-rose-50 text-rose-900',
      iconClass: 'text-rose-600'
    },
    mixed: {
      icon: Info,
      title: 'No QR codes were recorded',
      container: 'border-indigo-300 bg-indigo-50 text-indigo-900',
      iconClass: 'text-indigo-600'
    }
  }

  const renderBatchOutcomeNotice = () => {
    if (!batchOutcomeNotice) return null
    const visual = batchOutcomeVisuals[batchOutcomeNotice.type]
    const NoticeIcon = visual.icon
    return (
      <Alert className={`${visual.container} border-2`}>
        <NoticeIcon className={`h-5 w-5 ${visual.iconClass}`} />
        <AlertDescription>
          <p className="font-semibold">{visual.title}</p>
          <p className="mt-1 text-sm leading-relaxed">{batchOutcomeNotice.message}</p>
          <p className="mt-2 text-xs text-gray-500">
            You can continue scanning or paste the next batch whenever you are ready.
          </p>
        </AlertDescription>
      </Alert>
    )
  }

  const parseUniqueBatchInput = (raw: string) =>
    raw
      .split(/\r?\n/)
      .map(line => line.trim())
      .filter(line => line.length > 0)

  const parseMasterBatchInput = (raw: string) => {
    const lines = raw.split(/\r?\n/)
    const mapping = new Map<string, Set<string>>()
    const invalidLines: string[] = []

    for (const rawLine of lines) {
      const line = rawLine.trim()
      if (!line) continue

      const parts = line
        .split(/[\t,]+/)
        .map(token => token.replace(/"/g, '').trim())
        .filter(token => token.length > 0)

      if (parts.length < 2) {
        const preview = parts[0]?.toLowerCase() || ''
        if (!preview.includes('master') && !preview.includes('unique')) {
          invalidLines.push(line)
        }
        continue
      }

      const masterCodeToken = parts[0]
      const childCodes = parts.slice(1).filter(token => token.length > 6)

      if (childCodes.length === 0) {
        invalidLines.push(line)
        continue
      }

      if (!mapping.has(masterCodeToken)) {
        mapping.set(masterCodeToken, new Set())
      }

      const bucket = mapping.get(masterCodeToken)!
      childCodes.forEach(code => bucket.add(code))
    }

    const entries = Array.from(mapping.entries()).map(([master, codes]) => [master, Array.from(codes)] as [string, string[]])
    const totalUnique = entries.reduce((sum, [, codes]) => sum + codes.length, 0)

    return {
      entries,
      invalidLines,
      totalCases: entries.length,
      totalUnique
    }
  }

  const uniqueBatchStats = useMemo(() => {
    const codes = parseUniqueBatchInput(batchInput)
    const uniqueCodes = new Set(codes)
    return {
      lines: batchInput.trim().length === 0 ? 0 : batchInput.split(/\r?\n/).length,
      totalCodes: codes.length,
      uniqueCodes: uniqueCodes.size
    }
  }, [batchInput])

  const masterBatchPreview = useMemo(() => parseMasterBatchInput(masterBatchInput), [masterBatchInput])

  useEffect(() => {
    loadOrders()
    loadProgress()
    loadScanHistory()
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  useEffect(() => {
    if (selectedOrder) {
      loadProgress(selectedOrder)
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedOrder])

  useEffect(() => {
    if (packingMode !== 'scan_assign') {
      setMasterCode('')
    }

    if (packingMode !== 'bulk_generate') {
      setBulkGenerating(false)
    }
  }, [packingMode])

  useEffect(() => {
    if (packingMode === 'plan_import') {
      setShowMasterBatchInput(true)
    } else {
      setShowMasterBatchInput(false)
    }
  }, [packingMode])

  useEffect(() => {
    if (packingMode === 'bulk_generate' && expectedUnitsPerCase && bulkTargetCount === 0) {
      setBulkTargetCount(expectedUnitsPerCase)
    }
  }, [packingMode, expectedUnitsPerCase, bulkTargetCount])

  const loadOrders = async () => {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select(`
          id,
          order_no,
          status,
          created_at,
          organizations!orders_buyer_org_id_fkey (
            org_name
          ),
          qr_batches (
            id
          )
        `)
        .eq('seller_org_id', userProfile.organization_id)
        .in('status', ['approved', 'closed'])
        .order('created_at', { ascending: false })
        .limit(50)

      if (error) throw error
      setOrders(data || [])
    } catch (error: any) {
      console.error('Error loading orders:', error)
    }
  }

  const loadProgress = async (orderId?: string) => {
    try {
      const params = new URLSearchParams()
      if (orderId) params.append('order_id', orderId)
      params.append('manufacturer_id', userProfile.organization_id)

      const response = await fetch(`/api/manufacturer/batch-progress?${params.toString()}`)
      if (!response.ok) throw new Error('Failed to load progress')
      
      const result = await response.json()
      setBatchProgress(result.batches || [])
    } catch (error: any) {
      console.error('Error loading progress:', error)
    }
  }

  const loadScanHistory = async () => {
    try {
      console.log('🔍 Loading scan history via API')
      
      const response = await fetch('/api/manufacturer/scan-history')
      
      if (!response.ok) {
        throw new Error(`Failed to load scan history: ${response.status}`)
      }

      const result = await response.json()
      
      console.log('📊 Scan history API result:', { 
        success: result.success, 
        count: result.count 
      })

      if (!result.success) {
        throw new Error(result.error || 'Failed to load scan history')
      }

      const history: ScanHistory[] = (result.history || []).map((item: any) => ({
        id: item.id,
        order_id: item.order_id || null,
        master_code: item.master_code,
        case_number: item.case_number,
        unique_codes_count: item.actual_unit_count,
        scanned_at: item.scanned_at,
        batch_code: item.batch_code,
        order_no: item.order_no,
        status: item.status || null
      }))

      console.log('✅ Scan history loaded:', history.length, 'records')
      setScanHistory(history)
      setOrderScanHistory(selectedOrder ? history.filter((item) => item.order_id === selectedOrder) : [])
    } catch (error: any) {
      console.error('❌ Error loading scan history:', error)
      setScanHistory([])
      setOrderScanHistory([])
    }
  }

  const handleScanUnique = async (
    code: string,
    options: { silent?: boolean } = {}
  ): Promise<ScanResult> => {
    const { silent = false } = options

    if (isOrderLocked) {
      if (!silent) {
        toast({
          title: 'Order locked',
          description: 'Warehouse intake has begun for this order. Scanning is disabled to avoid conflicts.',
          variant: 'destructive'
        })
      }
      return { outcome: 'error', message: 'Order locked' }
    }

    if (!code.trim()) {
      if (!silent) {
        toast({
          title: 'Error',
          description: 'Please provide a QR code to scan.',
          variant: 'destructive'
        })
      }
      return { outcome: 'error', message: 'Empty QR code' }
    }

    if (!silent) {
      setScanning(true)
    }
    
    try {
      const response = await fetch('/api/manufacturer/scan-unique', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ qr_code: code.trim() })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to scan QR code')
      }
      
      const result = await response.json()
      
      if (result.already_scanned) {
        if (!silent) {
          toast({
            title: 'Warning',
            description: 'This QR code has already been scanned',
            variant: 'destructive'
          })
        }
        return { outcome: 'already_scanned', message: 'Previously scanned QR code' }
      }

      const isDuplicate = scannedCodes.some(c => c.code === result.product_info.code)
      if (isDuplicate) {
        if (!silent) {
          toast({
            title: 'Warning',
            description: 'This QR code has already been scanned in this session',
            variant: 'destructive'
          })
        }
        return { outcome: 'duplicate_session', message: 'Duplicate within current session' }
      }

      setScannedCodes(prev => [...prev, result.product_info])
      if (!silent) {
        setBatchOutcomeNotice(null)
        setQrInput('')
        toast({
          title: 'Success',
          description: `Scanned: ${result.product_info.product_name}`,
        })
      }

      return { outcome: 'success', message: result.product_info.product_name as string }
    } catch (error: any) {
      if (!silent) {
        toast({
          title: 'Error',
          description: error.message,
          variant: 'destructive'
        })
      }
      return { outcome: 'error', message: error.message }
    } finally {
      if (!silent) {
        setScanning(false)
      }
    }
  }

  const handleBatchPaste = () => {
    if (isOrderLocked) {
      toast({
        title: 'Order locked',
        description: 'Warehouse intake has begun for this order. Batch paste is disabled.',
        variant: 'destructive'
      })
      return
    }

    setBatchOutcomeNotice(null)
    if (!batchInput.trim()) {
      toast({
        title: 'Error',
        description: 'Please paste QR codes in the batch input field',
        variant: 'destructive'
      })
      return
    }

    const codes = batchInput
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0)

    if (codes.length === 0) {
      toast({
        title: 'Error',
        description: 'No valid QR codes found',
        variant: 'destructive'
      })
      return
    }

    let successCount = 0
    let duplicateCount = 0
    let errorCount = 0

    const startBatch = async () => {
      setBatchProcessingMode('unique-scan')
      setBatchProcessingSummary({
        total: codes.length,
        success: 0,
        duplicates: 0,
        errors: 0
      })
      setBatchProcessingStatus('Preparing batch scan...')
      setBatchProcessingProgress(0)
      setBatchProcessingActive(true)

      for (let index = 0; index < codes.length; index++) {
        setBatchProcessingStatus(`Scanning code ${index + 1} of ${codes.length}`)

        const result = await handleScanUnique(codes[index], { silent: true })

        switch (result.outcome) {
          case 'success':
            successCount++
            break
          case 'already_scanned':
          case 'duplicate_session':
            duplicateCount++
            break
          case 'error':
            errorCount++
            break
        }

        const progress = Math.round(((index + 1) / codes.length) * 100)
        setBatchProcessingProgress(progress)
        setBatchProcessingSummary({
          total: codes.length,
          success: successCount,
          duplicates: duplicateCount,
          errors: errorCount
        })
        await new Promise(resolve => setTimeout(resolve, 80))
      }

      const updateOutcomeNotice = () => {
        if (successCount === 0) {
          if (duplicateCount > 0 && errorCount === 0) {
            setBatchOutcomeNotice({
              type: 'duplicate',
              message: 'All QR codes you pasted were already captured for this order. No new packs were added.'
            })
          } else if (errorCount > 0 && duplicateCount === 0) {
            setBatchOutcomeNotice({
              type: 'error',
              message: 'None of the pasted QR codes belong to this order, so nothing was recorded.'
            })
          } else if (duplicateCount + errorCount > 0) {
            setBatchOutcomeNotice({
              type: 'mixed',
              message: 'Duplicates and invalid codes were skipped automatically, so nothing was recorded.'
            })
          }
        }
      }

      setBatchProcessingStatus('Batch scan complete!')
      setBatchProcessingSummary({
        total: codes.length,
        success: successCount,
        duplicates: duplicateCount,
        errors: errorCount
      })
      setBatchProcessingProgress(100)
      updateOutcomeNotice()
      setTimeout(() => {
        setBatchProcessingActive(false)
        setBatchProcessingMode(null)
      }, 1200)

      setBatchInput('')
      setShowBatchInput(false)
    }

    startBatch().catch(error => {
      console.error('Error during batch scan:', error)
      setBatchProcessingStatus('Batch scan interrupted. Please try again.')
      setTimeout(() => {
        setBatchProcessingActive(false)
        setBatchProcessingMode(null)
      }, 1500)
    })
  }

  const handleMasterBatchAssign = () => {
    if (isOrderLocked) {
      toast({
        title: 'Order locked',
        description: 'Warehouse intake has begun for this order. Auto assignment is disabled.',
        variant: 'destructive'
      })
      return
    }

    if (!masterBatchInput.trim()) {
      toast({
        title: 'Error',
        description: 'Paste the Excel export rows before processing.',
        variant: 'destructive'
      })
      return
    }

    const { entries, invalidLines, totalCases, totalUnique } = parseMasterBatchInput(masterBatchInput)

    if (entries.length === 0) {
      toast({
        title: 'No Master Cases Detected',
        description: 'Ensure each row includes a master code followed by at least one unique QR code.',
        variant: 'destructive'
      })
      return
    }

    let linkedCount = 0
    let skippedCount = 0
    let errorCount = 0
    let variantFilteredCount = 0

    const process = async () => {
      setBatchProcessingMode('master-link')
      setBatchProcessingSummary({
        total: totalCases,
        success: 0,
        duplicates: 0,
        errors: 0
      })
      setBatchProcessingProgress(0)
      setBatchProcessingStatus('Preparing auto-assignment...')
      setBatchProcessingActive(true)

      for (let index = 0; index < entries.length; index++) {
        const [master, codes] = entries[index]

        setBatchProcessingStatus(`Linking master case ${index + 1} of ${totalCases}`)

        try {
          const response = await fetch('/api/manufacturer/link-to-master', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              master_code: master,
              unique_codes: codes,
              manufacturer_org_id: userProfile.organization_id,
              user_id: userProfile.id,
              skip_case_validation: skipCaseValidation
            })
          })

          if (!response.ok) {
            const errorData = await response.json()
            const message = (errorData?.error || 'Failed to link master case') as string

            if (/already.+packed/i.test(message) || /already linked/i.test(message)) {
              skippedCount++
            } else {
              errorCount++
            }
          } else {
            const result = await response.json()
            linkedCount++
            
            // Track variant-filtered codes
            if (result.skipped_variant_count && result.skipped_variant_count > 0) {
              variantFilteredCount += result.skipped_variant_count
            }
          }
        } catch (error: any) {
          errorCount++
        }

        const progress = Math.round(((index + 1) / totalCases) * 100)
        setBatchProcessingProgress(progress)
        setBatchProcessingSummary({
          total: totalCases,
          success: linkedCount,
          duplicates: skippedCount,
          errors: errorCount
        })
        await new Promise(resolve => setTimeout(resolve, 100))
      }

      await Promise.all([loadProgress(selectedOrder), loadScanHistory()])

      setMasterBatchInput('')
      setShowMasterBatchInput(false)

      setBatchProcessingStatus('Auto assignment complete!')
      setBatchProcessingSummary({
        total: totalCases,
        success: linkedCount,
        duplicates: skippedCount,
        errors: errorCount
      })
      setBatchProcessingProgress(100)
      setTimeout(() => {
        setBatchProcessingActive(false)
        setBatchProcessingMode(null)
      }, 1500)

      if (invalidLines.length > 0) {
        toast({
          title: 'Some rows were skipped',
          description: `${invalidLines.length} line(s) could not be parsed. Ensure each row contains a master code and unique codes.`,
          variant: 'destructive'
        })
      }
      
      if (variantFilteredCount > 0) {
        toast({
          title: 'Variant Filtering Applied',
          description: `${variantFilteredCount} code(s) were automatically excluded during linking because they belonged to different product variants. These codes remain available in your buffer for master cases with matching variants.`,
        })
      }
    }

    process().catch(error => {
      console.error('Error during master batch assignment:', error)
      setBatchProcessingStatus('Auto assignment interrupted. Please review the data.')
      setTimeout(() => {
        setBatchProcessingActive(false)
        setBatchProcessingMode(null)
      }, 1500)
    })
  }

  const handleGenerateBulkMaster = async () => {
    if (packingMode !== 'bulk_generate') {
      return
    }

    if (isOrderLocked) {
      toast({
        title: 'Order locked',
        description: 'Warehouse intake has begun for this order. Automatic master creation is disabled.',
        variant: 'destructive'
      })
      return
    }

    if (!currentBatchProgress) {
      toast({
        title: 'No Batch Selected',
        description: 'Select an order with an active batch before generating master cases.',
        variant: 'destructive'
      })
      return
    }

    const targetUnits = Number(bulkTargetCount)
    if (!targetUnits || Number.isNaN(targetUnits) || targetUnits < 1) {
      toast({
        title: 'Set a Target First',
        description: 'Enter the expected number of units per master case before generating.',
        variant: 'destructive'
      })
      return
    }

    if (scannedCodes.length < targetUnits) {
      toast({
        title: 'Not Enough Codes Yet',
        description: `Scan ${targetUnits - scannedCodes.length} more unique code${targetUnits - scannedCodes.length === 1 ? '' : 's'} before generating a master case.`,
        variant: 'destructive'
      })
      return
    }

    const codesToLink = scannedCodes.slice(0, targetUnits)
    const remainingCodes = scannedCodes.slice(targetUnits)

    try {
      setBulkGenerating(true)
      const { data: nextMaster, error: masterLookupError } = await supabase
        .from('qr_master_codes')
        .select('id, master_code, case_number, expected_unit_count')
        .eq('batch_id', currentBatchProgress.batch_id)
        .eq('status', 'generated')
        .order('case_number', { ascending: true })
        .limit(1)
        .maybeSingle()

      if (masterLookupError) {
        throw masterLookupError
      }

      if (!nextMaster) {
        toast({
          title: 'No Available Master Cases',
          description: 'All master cases for this batch are already packed. Generate more via the Excel tool if needed.',
          variant: 'destructive'
        })
        return
      }

      if (nextMaster.expected_unit_count && codesToLink.length > nextMaster.expected_unit_count) {
        toast({
          title: 'Too Many Codes',
          description: `This master case expects ${nextMaster.expected_unit_count} units, but ${codesToLink.length} are selected. Remove extra codes and try again.`,
          variant: 'destructive'
        })
        return
      }

      const response = await fetch('/api/manufacturer/link-to-master', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          master_code: nextMaster.master_code,
          unique_codes: codesToLink.map(code => code.code),
          manufacturer_org_id: userProfile.organization_id,
          user_id: userProfile.id,
          skip_case_validation: true
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate master case')
      }

      const result = await response.json()

      setScannedCodes(remainingCodes)
      setRecentAutoMasters(prev => [
        {
          master_code: result.master_code_info.master_code,
          case_number: result.master_code_info.case_number,
          total_units: result.master_code_info.actual_units,
          created_at: new Date().toISOString()
        },
        ...prev
      ].slice(0, 5))

      const leftoverCount = remainingCodes.length
      toast({
        title: 'Master Case Created',
        description: `Generated Case #${result.master_code_info.case_number} with ${result.master_code_info.actual_units} units.${leftoverCount > 0 ? ` ${leftoverCount} code${leftoverCount === 1 ? '' : 's'} left in buffer.` : ''}`,
      })

      await Promise.all([loadProgress(selectedOrder), loadScanHistory()])
    } catch (error: any) {
      console.error('Error generating master case automatically:', error)
      toast({
        title: 'Generation Failed',
        description: error.message || 'Unable to create master case automatically.',
        variant: 'destructive'
      })
    } finally {
      setBulkGenerating(false)
    }
  }

  const handleLinkToMaster = async () => {
    if (isOrderLocked) {
      toast({
        title: 'Order locked',
        description: 'Warehouse intake has begun for this order. Linking changes are disabled.',
        variant: 'destructive'
      })
      return
    }

    if (!masterCode.trim() || scannedCodes.length === 0) {
      toast({
        title: 'Error',
        description: 'Please scan master code and at least one unique code',
        variant: 'destructive'
      })
      return
    }

    try {
      setLinking(true)
      const response = await fetch('/api/manufacturer/link-to-master', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          master_code: masterCode,
          unique_codes: scannedCodes.map(c => c.code),
          manufacturer_org_id: userProfile.organization_id,
          user_id: userProfile.id,
          skip_case_validation: skipCaseValidation
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to link codes')
      }
      
      const result = await response.json()
      const linkedCodes: string[] = result.linked_codes || []
      const unusedCodes: string[] = result.unused_codes || []
      const skippedVariantCodes: string[] = result.skipped_variant_codes || []
      const isComplete = Boolean(result.master_code_info?.is_complete)

      // Build success message with variant filtering info
      let description = `Successfully linked ${result.linked_count} code(s) to Case #${result.master_code_info.case_number}`
      
      if (result.master_code_info.variant_name) {
        description += ` (${result.master_code_info.variant_name})`
      }
      
      if (skippedVariantCodes.length > 0) {
        const skippedSummary = Object.entries(result.skipped_variant_summary || {})
          .map(([variant, count]) => `${count} ${variant}`)
          .join(', ')
        description += `.\n\n⚠️ ${skippedVariantCodes.length} code(s) were not linked because they belong to different variant(s): ${skippedSummary}. These codes remain in your buffer and can be linked to a master case with the matching variant.`
      } else if (unusedCodes.length > 0) {
        description += `.\n\n${unusedCodes.length} code(s) kept for the next case (capacity reached).`
      }

      toast({
        title: skippedVariantCodes.length > 0 ? 'Partially Linked' : 'Success',
        description,
      })

      // Remove only the linked codes from scanned codes
      setScannedCodes(prev => prev.filter(item => !linkedCodes.includes(item.code)))

      if (isComplete) {
        setMasterCode('')
      }
      
      loadProgress(selectedOrder)
      loadScanHistory()
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive'
      })
    } finally {
      setLinking(false)
    }
  }

  const handleRemoveCode = (index: number) => {
    setScannedCodes(prev => prev.filter((_, i) => i !== index))
  }

  const handleUnlinkMaster = async (masterCodeId: string, caseNumber: number) => {
    if (isOrderLocked) {
      toast({
        title: 'Order locked',
        description: 'Warehouse intake has begun for this order. Master cases can no longer be unlinked.',
        variant: 'destructive'
      })
      return
    }

    if (!confirm(`Are you sure you want to unlink Case #${caseNumber}? This will reset all unique codes back to unscanned state.`)) {
      return
    }

    try {
      setUnlinking(masterCodeId)
      const response = await fetch('/api/manufacturer/unlink-master', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          master_code_id: masterCodeId,
          user_id: userProfile.id
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to unlink master case')
      }
      
      const result = await response.json()
      
      toast({
        title: 'Success',
        description: result.message || `Successfully unlinked Case #${caseNumber}`,
      })
      
      loadProgress(selectedOrder)
      loadScanHistory()
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive'
      })
    } finally {
      setUnlinking(null)
    }
  }

  const handleDownloadScanSummary = async () => {
    if (!currentBatchProgress) {
      toast({
        title: 'Error',
        description: 'No active batch to export',
        variant: 'destructive'
      })
      return
    }

    try {
      setDownloadingExcel(true)
      
      const response = await fetch(`/api/manufacturer/scan-summary-excel?batch_id=${currentBatchProgress.batch_id}`)
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate Excel file')
      }

      // Get the blob from response
      const blob = await response.blob()
      
      // Create a download link
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `Scan_Summary_${currentBatchProgress.batch_code}_${new Date().toISOString().split('T')[0]}.xlsx`
      document.body.appendChild(a)
      a.click()
      
      // Cleanup
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      
      toast({
        title: 'Success',
        description: 'Scan summary Excel file downloaded successfully',
      })
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive'
      })
    } finally {
      setDownloadingExcel(false)
    }
  }

  const handleCompleteProduction = async () => {
    if (!currentBatchProgress) {
      toast({
        title: 'Error',
        description: 'No active batch selected',
        variant: 'destructive'
      })
      return
    }

    // Check if production is ready to be completed (must be 100%)
    const progressPercent = currentBatchProgress.master_progress_percentage || 0
    
    if (progressPercent < 100) {
      toast({
        title: 'Cannot Complete Production',
        description: `Production must be 100% complete. Current progress: ${progressPercent.toFixed(1)}%`,
        variant: 'destructive'
      })
      return
    }

    try {
      setCompletingProduction(true)
      
      const response = await fetch('/api/manufacturer/complete-production', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          batch_id: currentBatchProgress.batch_id 
        })
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to complete production')
      }

      const result = await response.json()
      
      toast({
        title: 'Production Complete! 🎉',
        description: `Batch ${currentBatchProgress.batch_code} is now ready for warehouse shipment. ${result.packed_master_codes} of ${result.total_master_codes} cases packed.`,
      })

      // Refresh batch progress to show updated status
      await loadProgress(selectedOrder)
      await loadOrders()
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive'
      })
    } finally {
      setCompletingProduction(false)
    }
  }

  const handleViewMasterDetails = async (masterItem: ScanHistory) => {
    setSelectedMasterForDetail(masterItem)
    setLoadingChildCodes(true)
    setMasterChildCodes([])

    try {
      // Query using master code ID from qr_master_codes table
      const { data: masterData, error: masterError } = await supabase
        .from('qr_master_codes')
        .select('id')
        .eq('master_code', masterItem.master_code)
        .single()

      if (masterError) throw masterError

      // Now get child codes using the master_code_id
      const { data, error } = await supabase
        .from('qr_codes')
        .select('id, code, last_scanned_at, status, master_code_id')
        .eq('master_code_id', masterData.id)
        .order('code', { ascending: true })

      if (error) throw error

      setMasterChildCodes(data || [])
    } catch (error: any) {
      toast({
        title: 'Error',
        description: 'Failed to load child QR codes',
        variant: 'destructive'
      })
      setSelectedMasterForDetail(null)
    } finally {
      setLoadingChildCodes(false)
    }
  }

  useEffect(() => {
    if (!selectedOrder) {
      setOrderScanHistory([])
      return
    }

    setOrderScanHistory(scanHistory.filter((item) => item.order_id === selectedOrder))
  }, [selectedOrder, scanHistory])

  const DonutProgress = ({ value, label }: { value: number; label: string }) => {
    const clamped = Math.max(0, Math.min(100, Number.isFinite(value) ? value : 0))
    const angle = clamped * 3.6
    return (
      <div className="flex flex-col items-center gap-3">
        <div className="relative h-28 w-28">
          <div
            className="absolute inset-0 rounded-full"
            style={{
              background: `conic-gradient(#1d4ed8 ${angle}deg, #e5e7eb ${angle}deg)`
            }}
          />
          <div className="absolute inset-[14px] rounded-full bg-white flex items-center justify-center shadow-inner">
            <span className="text-xl font-semibold text-blue-700">{clamped}%</span>
          </div>
        </div>
        <p className="text-sm font-medium text-gray-700 text-center">{label}</p>
      </div>
    )
  }

  const renderStatusBadge = (status?: string | null): JSX.Element => {
    switch (status) {
      case 'generated':
        return (
          <Badge variant="secondary" className="bg-amber-100 text-amber-900 border-amber-200">
            In Progress
          </Badge>
        )
      case 'packed':
        return (
          <Badge variant="default" className="bg-green-600">
            <CheckCircle className="h-3 w-3 mr-1" />
            Packed
          </Badge>
        )
      case 'pending':
        return (
          <Badge variant="secondary" className="bg-amber-100 text-amber-900 border-amber-200">
            In Progress
          </Badge>
        )
      case 'received_warehouse':
        return (
          <Badge variant="default" className="bg-blue-600">
            Received at Warehouse
          </Badge>
        )
      case 'shipped_distributor':
        return (
          <Badge variant="default" className="bg-purple-600">
            Shipped to Distributor
          </Badge>
        )
      case 'opened':
        return (
          <Badge variant="default" className="bg-slate-700">
            Case Opened
          </Badge>
        )
      default:
        return (
          <Badge variant="secondary" className="uppercase">
            {status || 'Unknown'}
          </Badge>
        )
    }
  }

  const HistoryTable = ({
    history,
    emptyTitle,
    emptyDescription
  }: {
    history: ScanHistory[]
    emptyTitle: string
    emptyDescription?: string
  }) => (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="border-b border-gray-200 bg-gray-50">
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Case #</th>
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Master Code</th>
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Units</th>
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Scanned At</th>
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Status</th>
            <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Action</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200">
          {history.length === 0 ? (
            <tr>
              <td colSpan={6} className="text-center py-8 text-gray-500">
                <Box className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                <p>{emptyTitle}</p>
                {emptyDescription && (
                  <p className="text-sm text-gray-400 mt-1">
                    {emptyDescription}
                  </p>
                )}
              </td>
            </tr>
          ) : (
            history.map((item) => (
              <tr key={item.id} className="hover:bg-gray-50">
                <td className="py-3 px-4">
                  <Badge variant="outline">#{item.case_number}</Badge>
                </td>
                <td className="py-3 px-4 font-mono text-xs">
                  <button
                    onClick={() => handleViewMasterDetails(item)}
                    className="text-blue-600 hover:text-blue-800 hover:underline font-semibold transition-colors"
                  >
                    {item.master_code}
                  </button>
                </td>
                <td className="py-3 px-4">
                  <span className="text-sm font-medium text-gray-900">
                    {item.unique_codes_count} units
                  </span>
                </td>
                <td className="py-3 px-4 text-sm text-gray-600">
                  {item.scanned_at ? new Date(item.scanned_at).toLocaleString() : '-'}
                </td>
                <td className="py-3 px-4">
                  {renderStatusBadge(item.status)}
                </td>
                <td className="py-3 px-4">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleUnlinkMaster(item.id, item.case_number)}
                    disabled={unlinking === item.id || isOrderLocked}
                    className="text-orange-600 hover:text-orange-700 hover:bg-orange-50"
                  >
                    {unlinking === item.id ? (
                      <RefreshCw className="h-4 w-4 animate-spin" />
                    ) : (
                      <>
                        <Unlink className="h-4 w-4 mr-1" />
                        Unlink
                      </>
                    )}
                  </Button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  )

  const uniqueScanCard = (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Scan className="h-5 w-5" />
          {packingMode === 'bulk_generate' ? 'Capture Unique QR Codes' : 'Scan Unique QR Codes'}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isOrderLocked && (
          <Alert className="border-amber-200 bg-amber-50 text-amber-900">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Warehouse intake has begun for this order. Scanning is paused until receiving is complete.
            </AlertDescription>
          </Alert>
        )}
        {renderBatchOutcomeNotice()}
        {packingMode === 'bulk_generate' && (
          <div className="rounded-lg border border-blue-200 bg-blue-50 p-3 text-sm text-blue-700">
            Scan the unique packs that belong in the next master case. When you hit the target count, create the case automatically on the right.
          </div>
        )}

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Scan/Enter QR Code
          </label>
          <div className="flex gap-2">
            <input
              type="text"
              value={qrInput}
              onChange={(e) => setQrInput(e.target.value)}
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleScanUnique(qrInput)
                }
              }}
              placeholder="Scan or type QR code..."
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={scanning || isOrderLocked}
            />
            <Button
              onClick={() => handleScanUnique(qrInput)}
              disabled={scanning || !qrInput.trim() || isOrderLocked}
            >
              {scanning ? (
                <RefreshCw className="h-4 w-4 animate-spin" />
              ) : (
                <Scan className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>

        <div>
          <Button
            variant="outline"
            onClick={() => setShowBatchInput(!showBatchInput)}
            className="w-full"
            disabled={isOrderLocked}
          >
            <ClipboardPaste className="h-4 w-4 mr-2" />
            {showBatchInput ? 'Hide' : 'Show'} Batch Paste
          </Button>
        </div>

        {showBatchInput && (
          <div className="border border-blue-200 rounded-lg p-4 bg-blue-50 space-y-3">
            <label className="block text-sm font-medium text-gray-700">
              Paste Multiple QR Codes (one per line)
            </label>
            <textarea
              value={batchInput}
              onChange={(e) => setBatchInput(e.target.value)}
              placeholder="Paste QR codes here... (one per line)&#10;PROD-ZEREL6829-MAN-552896-ORD-HM-1025-03-00001&#10;PROD-ZEREL6829-MAN-552896-ORD-HM-1025-03-00002&#10;..."
              rows={6}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 font-mono text-xs"
              disabled={isOrderLocked}
            />
            <div className="flex gap-2">
              <Button
                onClick={handleBatchPaste}
                disabled={!batchInput.trim() || isOrderLocked}
                className="flex-1"
              >
                <ClipboardPaste className="h-4 w-4 mr-2" />
                Process Batch
              </Button>
              <Button
                variant="outline"
                onClick={() => setBatchInput('')}
                disabled={isOrderLocked}
              >
                Clear
              </Button>
            </div>
            <div className="text-xs text-gray-600">
              {uniqueBatchStats.totalCodes > 0 ? (
                <span>
                  Detected <strong>{uniqueBatchStats.totalCodes}</strong> QR codes (
                  <strong>{uniqueBatchStats.uniqueCodes}</strong> unique across {uniqueBatchStats.lines} line{uniqueBatchStats.lines === 1 ? '' : 's'}).
                </span>
              ) : (
                <span>Paste QR codes above to preview how many will be processed.</span>
              )}
            </div>
          </div>
        )}

        <div>
          <div className="flex items-center justify-between mb-2">
            <label className="text-sm font-medium text-gray-700">
              Scanned Codes ({scannedCodes.length})
            </label>
            {scannedCodes.length > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setScannedCodes([])}
                disabled={isOrderLocked}
              >
                Clear All
              </Button>
            )}
          </div>
          
          <div className="border border-gray-200 rounded-lg max-h-96 overflow-y-auto">
            {scannedCodes.length === 0 ? (
              <div className="p-8 text-center text-gray-500">
                <QrCode className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                <p>No codes scanned yet</p>
                <p className="text-sm">Scan QR codes to begin</p>
              </div>
            ) : (
              <div className="divide-y divide-gray-200">
                {scannedCodes.map((code, index) => (
                  <div key={index} className="p-3 flex items-center justify-between hover:bg-gray-50">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <Badge variant="secondary" className="text-xs">
                          #{code.sequence_number}
                        </Badge>
                        <p className="text-sm font-medium text-gray-900">
                          {code.product_name}
                        </p>
                      </div>
                      <p className="text-xs text-gray-500">
                        {code.variant_name}
                      </p>
                      <p className="text-xs text-gray-400 font-mono mt-1">
                        {code.code}
                      </p>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleRemoveCode(index)}
                      disabled={isOrderLocked}
                    >
                      <Trash2 className="h-4 w-4 text-red-600" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  )

  const manualLinkCard = (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Package className="h-5 w-5" />
          Link to Master Case
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isOrderLocked && (
          <Alert className="border-amber-200 bg-amber-50 text-amber-900">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Warehouse intake has begun for this order. Linking changes are temporarily disabled.
            </AlertDescription>
          </Alert>
        )}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Master Case QR Code
          </label>
          <input
            type="text"
            value={masterCode}
            onChange={(e) => setMasterCode(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter' && scannedCodes.length > 0) {
                handleLinkToMaster()
              }
            }}
            placeholder="Scan master case QR code..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            disabled={isOrderLocked}
          />
        </div>

        <div className="space-y-2">
          <Button
            variant="outline"
            onClick={() => setShowMasterBatchInput(!showMasterBatchInput)}
            className="w-full"
            disabled={isOrderLocked}
          >
            <ClipboardPaste className="h-4 w-4 mr-2" />
            {showMasterBatchInput ? 'Hide' : 'Show'} Master Case Batch Assign
          </Button>
          <p className="text-xs text-gray-500">
            Paste Excel rows where each line lists a master code followed by its unique QR codes. The system will auto-link them for you.
          </p>
        </div>

        {showMasterBatchInput && (
          <div className="border border-purple-200 rounded-lg p-4 bg-purple-50 space-y-3">
            <label className="block text-sm font-medium text-gray-700">
              Paste Master → Unique Mapping
            </label>
            <textarea
              value={masterBatchInput}
              onChange={(e) => setMasterBatchInput(e.target.value)}
              placeholder="MASTER-CASE-QR-0001,PROD-...-00001,PROD-...-00002&#10;MASTER-CASE-QR-0002\tPROD-...-00011\tPROD-...-00012"
              rows={5}
              className="w-full px-3 py-2 border border-purple-200 rounded-lg focus:ring-2 focus:ring-purple-500 font-mono text-xs bg-white"
              disabled={isOrderLocked}
            />
            <div className="flex flex-col sm:flex-row gap-2">
              <Button
                onClick={handleMasterBatchAssign}
                disabled={!masterBatchInput.trim() || isOrderLocked}
                className="flex-1"
              >
                <LinkIcon className="h-4 w-4 mr-2" />
                Auto Assign from Mapping
              </Button>
              <Button
                variant="outline"
                onClick={() => setMasterBatchInput('')}
                disabled={isOrderLocked}
              >
                Clear
              </Button>
            </div>
            <div className="text-xs text-purple-700">

              {masterBatchPreview.totalCases > 0 ? (
                <span>
                  Ready to link <strong>{masterBatchPreview.totalCases}</strong> master case{masterBatchPreview.totalCases === 1 ? '' : 's'} covering{' '}
                  <strong>{masterBatchPreview.totalUnique}</strong> child QR codes.
                  {masterBatchPreview.invalidLines.length > 0 && (
                    <span className="text-amber-700">
                      {' '}
                      ({masterBatchPreview.invalidLines.length} line{masterBatchPreview.invalidLines.length === 1 ? '' : 's'} skipped as headers/invalid.)
                    </span>
                  )}
                </span>
              ) : (
                <span>Paste exported rows to preview how many cases will be auto-assigned.</span>
              )}
            </div>
            <p className="text-xs text-purple-700">
              Tip: Copy rows directly from the generated Excel file — headers will be ignored automatically.
            </p>
          </div>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-700">Unique Codes:</span>
            <span className="text-lg font-bold text-blue-600">
              {scannedCodes.length}
            </span>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-700">Master Code:</span>
            <span className="text-sm font-medium text-gray-900">
              {masterCode || 'Not scanned'}
            </span>
          </div>
        </div>

        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <label className="flex items-center gap-2 cursor-pointer">
            <input
              type="checkbox"
              checked={skipCaseValidation}
              onChange={(e) => setSkipCaseValidation(e.target.checked)}
              className="w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
              disabled={isOrderLocked}
            />
            <div className="flex-1">
              <span className="text-sm font-medium text-gray-900">
                Skip Case Number Validation
              </span>
              <p className="text-xs text-gray-600 mt-0.5">
                {skipCaseValidation 
                  ? '⚠️ Warning: Any codes can be linked to any master case (validation disabled)'
                  : '✅ Only codes matching the case number range will be accepted'}
              </p>
            </div>
          </label>
        </div>

        <Button
          onClick={handleLinkToMaster}
          disabled={linking || scannedCodes.length === 0 || !masterCode || isOrderLocked}
          className="w-full"
          size="lg"
        >
          {linking ? (
            <>
              <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
              Linking...
            </>
          ) : (
            <>
              <LinkIcon className="h-5 w-5 mr-2" />
              Link to Master Case
            </>
          )}
        </Button>

        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-2">Instructions:</h4>
          <ol className="text-sm text-gray-600 space-y-1 list-decimal list-inside">
            <li>Scan all unique QR codes for this case</li>
            <li>Or use &quot;Batch Paste&quot; to paste from Excel</li>
            <li>Verify the count matches expected units</li>
            <li>Scan the master case QR code</li>
            <li>Click &quot;Link to Master Case&quot; to complete</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  )

  const readyToAssignCount = bulkTargetCount > 0
    ? Math.min(scannedCodes.length, bulkTargetCount)
    : scannedCodes.length
  const bufferedCount = bulkTargetCount > 0
    ? Math.max(scannedCodes.length - bulkTargetCount, 0)
    : 0

  const bulkFinalizeCard = (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Package className="h-5 w-5" />
          Generate Master Case Automatically
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isOrderLocked && (
          <Alert className="border-amber-200 bg-amber-50 text-amber-900">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Warehouse intake has begun for this order. Automatic master creation is disabled until receiving is complete.
            </AlertDescription>
          </Alert>
        )}
        <div className="rounded-lg border border-blue-200 bg-blue-50 p-4 space-y-2">
          <p className="text-sm text-blue-900 font-medium">
            Target per master case
          </p>
          <p className="text-xs text-blue-700">
            {expectedUnitsPerCase ? (
              <>Suggested: {expectedUnitsPerCase} units (based on batch plan). Adjust if this case should hold a different quantity.</>
            ) : (
              <>Set the number of unique units that should be inside each master case.</>
            )}
          </p>
          <input
            type="number"
            min={1}
            value={bulkTargetCount || ''}
            onChange={(e) => setBulkTargetCount(Number(e.target.value))}
            className="w-full rounded-lg border border-blue-300 px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
            placeholder="Units per master case"
            disabled={isOrderLocked}
          />
        </div>

        <div className="grid grid-cols-2 gap-3 text-sm">
          <div className="rounded-lg border border-gray-200 bg-gray-50 p-3">
            <p className="text-xs text-gray-500 uppercase">Ready to assign</p>
            <p className="text-xl font-semibold text-gray-900">{readyToAssignCount}</p>
          </div>
          <div className="rounded-lg border border-gray-200 bg-gray-50 p-3">
            <p className="text-xs text-gray-500 uppercase">Remaining in buffer</p>
            <p className="text-xl font-semibold text-gray-900">{bufferedCount}</p>
          </div>
        </div>

        <Button
          onClick={handleGenerateBulkMaster}
          disabled={bulkGenerating || bulkTargetCount <= 0 || scannedCodes.length < bulkTargetCount || isOrderLocked}
          className="w-full"
          size="lg"
        >
          {bulkGenerating ? (
            <>
              <RefreshCw className="mr-2 h-5 w-5 animate-spin" />
              Creating master case...
            </>
          ) : (
            <>
              <Package className="mr-2 h-5 w-5" />
              Create Master Case Now
            </>
          )}
        </Button>

        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-2">How it works</h4>
          <ol className="text-sm text-gray-600 space-y-1 list-decimal list-inside">
            <li>Scan unique codes on the left until you reach the target count.</li>
            <li>Click &quot;Create Master Case&quot; — we will claim the next pending master QR.</li>
            <li>The case is packed, remaining scans stay in the buffer for the next case.</li>
          </ol>
        </div>

        {recentAutoMasters.length > 0 && (
          <div className="rounded-lg border border-green-200 bg-green-50 p-3 space-y-2">
            <p className="text-sm font-medium text-green-800 flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              Recent automatic cases
            </p>
            <div className="space-y-1 text-xs text-green-800">
              {recentAutoMasters.map((item, index) => (
                <div key={`${item.master_code}-${index}`} className="flex items-center justify-between">
                  <span className="font-medium">Case #{item.case_number}</span>
                  <span>{item.total_units} units • {new Date(item.created_at).toLocaleTimeString()}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )

  const planImportCard = (
    <Card className="lg:col-span-2">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ClipboardPaste className="h-5 w-5" />
          Import Packing Plan Mapping
        </CardTitle>
        <p className="text-sm text-gray-500">
          Paste the rows from the planning spreadsheet. Each line should contain a master case followed by its child codes — the system will validate and link them in bulk.
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {isOrderLocked && (
          <Alert className="border-amber-200 bg-amber-50 text-amber-900">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Warehouse intake has begun for this order. Importing plans is disabled until receiving is complete.
            </AlertDescription>
          </Alert>
        )}
        <div className="border border-purple-200 rounded-lg p-4 bg-purple-50 space-y-3">
          <label className="block text-sm font-medium text-gray-700">
            Paste Master → Unique Mapping
          </label>
          <textarea
            value={masterBatchInput}
            onChange={(e) => setMasterBatchInput(e.target.value)}
            placeholder="MASTER-CASE-QR-0001,PROD-...-00001,PROD-...-00002&#10;MASTER-CASE-QR-0002\tPROD-...-00011\tPROD-...-00012"
            rows={7}
            className="w-full px-3 py-2 border border-purple-200 rounded-lg focus:ring-2 focus:ring-purple-500 font-mono text-xs bg-white"
            disabled={isOrderLocked}
          />
          <div className="flex flex-col sm:flex-row gap-2">
            <Button
              onClick={handleMasterBatchAssign}
              disabled={!masterBatchInput.trim() || isOrderLocked}
              className="flex-1"
            >
              <LinkIcon className="h-4 w-4 mr-2" />
              Auto Assign from Mapping
            </Button>
            <Button
              variant="outline"
              onClick={() => setMasterBatchInput('')}
              disabled={isOrderLocked}
            >
              Clear
            </Button>
          </div>
          <div className="text-xs text-purple-700">

            {masterBatchPreview.totalCases > 0 ? (
              <span>
                Ready to link <strong>{masterBatchPreview.totalCases}</strong> master case{masterBatchPreview.totalCases === 1 ? '' : 's'} covering{' '}
                <strong>{masterBatchPreview.totalUnique}</strong> child QR codes.
                {masterBatchPreview.invalidLines.length > 0 && (
                  <span className="text-amber-700">
                    {' '}
                    ({masterBatchPreview.invalidLines.length} line{masterBatchPreview.invalidLines.length === 1 ? '' : 's'} skipped as headers/invalid.)
                  </span>
                )}
              </span>
            ) : (
              <span>Paste exported rows to preview how many cases will be auto-assigned.</span>
            )}
          </div>
          <p className="text-xs text-purple-700">
            Tip: Copy rows directly from the generated Excel file — headers will be ignored automatically.
          </p>
        </div>

        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-2">Plan import workflow</h4>
          <ol className="text-sm text-gray-600 space-y-1 list-decimal list-inside">
            <li>Generate or receive the packing plan spreadsheet.</li>
            <li>Copy the rows (master code + child codes) and paste them here.</li>
            <li>Click auto-assign to let the system validate, link, and mark master cases instantly.</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  )
  return (
    <div className="space-y-6 relative">
      {batchProcessingActive && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm">
          <div className="bg-white shadow-2xl rounded-2xl p-8 w-full max-w-md space-y-6 border border-blue-100">
            <div className="space-y-2 text-center">
              <h3 className="text-xl font-semibold text-gray-900">
                {batchProcessingMode === 'master-link' ? 'Auto Assigning Master Cases' : 'Processing Batch'}
              </h3>
              <p className="text-sm text-gray-600">{batchProcessingStatus}</p>
              <p className="text-xs text-gray-400 uppercase tracking-wide">
                {batchProcessingSummary.success} of {batchProcessingSummary.total}{' '}
                {batchProcessingMode === 'master-link' ? 'cases linked' : 'codes scanned'}
              </p>
            </div>
            <Progress value={batchProcessingProgress} className="h-3" />
            <div className="grid grid-cols-3 gap-3 text-center text-sm">
              <div className="bg-blue-50 rounded-lg py-3">
                <p className="text-xs text-blue-700 uppercase tracking-wide">
                  {batchProcessingMode === 'master-link' ? 'Linked' : 'Success'}
                </p>
                <p className="text-lg font-semibold text-blue-900">{batchProcessingSummary.success}</p>
              </div>
              <div className="bg-amber-50 rounded-lg py-3">
                <p className="text-xs text-amber-700 uppercase tracking-wide">
                  {batchProcessingMode === 'master-link' ? 'Skipped' : 'Duplicates'}
                </p>
                <p className="text-lg font-semibold text-amber-900">{batchProcessingSummary.duplicates}</p>
              </div>
              <div className="bg-rose-50 rounded-lg py-3">
                <p className="text-xs text-rose-700 uppercase tracking-wide">Errors</p>
                <p className="text-lg font-semibold text-rose-900">{batchProcessingSummary.errors}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div>
        <h1 className="text-3xl font-bold text-gray-900">Manufacturer Scan</h1>
        <p className="text-gray-600 mt-1">
          Scan unique QR codes and link them to master case codes
        </p>
      </div>

      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
        <CardContent className="p-4">
          <div className="flex items-center gap-4">
            <Target className="h-5 w-5 text-blue-600" />
            <div className="flex-1">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Select Order to Track Progress
              </label>
              <select
                value={selectedOrder}
                onChange={(e) => setSelectedOrder(e.target.value)}
                className="w-full px-4 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white"
              >
                <option value="">All Orders</option>
                {orders.map(order => (
                  <option key={order.id} value={order.id}>
                    {order.order_no} - {Array.isArray(order.organizations) 
                      ? order.organizations[0]?.org_name 
                      : order.organizations?.org_name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="border-blue-200">
        <CardHeader className="pb-3">
          <CardTitle className="text-lg font-semibold text-gray-900">
            Choose Packing Mode
          </CardTitle>
          <p className="text-sm text-gray-500">
            Align the workflow with how your team is packing today. Switch modes anytime — progress is preserved.
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            {packingModeOptions.map(option => {
              const Icon = option.icon
              const isActive = option.id === packingMode
              return (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => setPackingMode(option.id)}
                  className={`text-left border rounded-xl p-4 transition shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${isActive ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-white hover:border-blue-200'}`}
                >
                  <div className="flex items-start gap-3">
                    <span className={`inline-flex h-10 w-10 items-center justify-center rounded-full ${isActive ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-600'}`}>
                      <Icon className="h-5 w-5" />
                    </span>
                    <div className="space-y-1">
                      <p className={`font-semibold ${isActive ? 'text-blue-700' : 'text-gray-900'}`}>
                        {option.title}
                      </p>
                      <p className="text-sm text-gray-600">
                        {option.description}
                      </p>
                    </div>
                  </div>
                </button>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {currentBatchProgress && (
        <Card className="border-green-200 bg-green-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-green-900">
              <TrendingUp className="h-5 w-5" />
              Current Batch Progress: {currentBatchProgress.batch_code}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {isOrderLocked && (
              <Alert className="border-orange-300 bg-orange-50">
                <AlertTriangle className="h-5 w-5 text-orange-600" />
                <AlertDescription className="text-orange-900">
                  <p className="font-semibold text-base mb-2">
                    🔒 Warehouse Receiving In Progress
                  </p>
                  <p className="text-orange-800 font-medium">
                    This order is currently being received at the warehouse. 
                    Manufacturing operations are now <strong>view-only</strong> to prevent data conflicts.
                  </p>
                  <div className="mt-3 space-y-1 text-sm text-orange-800">
                    <p className="flex items-center gap-2">
                      <span className="text-green-600 font-bold">✓</span> You can view scan history and current progress
                    </p>
                    <p className="flex items-center gap-2">
                      <span className="text-green-600 font-bold">✓</span> You can download scan summary (Excel)
                    </p>
                    <p className="flex items-center gap-2">
                      <span className="text-red-600 font-bold">✗</span> Cannot scan new codes or link to master cases
                    </p>
                    <p className="flex items-center gap-2">
                      <span className="text-red-600 font-bold">✗</span> Cannot unlink or edit existing master cases
                    </p>
                  </div>
                  <p className="mt-3 text-xs text-orange-700 font-medium">
                    <strong>Warehouse Status:</strong> {currentBatchProgress.warehouse_received_cases || 0} of {currentBatchProgress.packed_master_codes} master cases received
                  </p>
                </AlertDescription>
              </Alert>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-gray-700">Master Cases Packed</span>
                  <span className="text-gray-900 font-bold">
                    {currentBatchProgress.packed_master_codes} / {currentBatchProgress.total_master_codes}
                  </span>
                </div>
                <Progress value={masterPercent} className="h-3" />
                <p className="text-xs text-gray-600">
                  {masterPercent}% Complete
                </p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-gray-700">Unique Codes Packed</span>
                  <span className="text-gray-900 font-bold">
                    {displayedPackedUniqueCount} / {plannedUniqueCount}
                  </span>
                </div>
                <Progress value={uniquePercent} className="h-3" />
                <div className="flex flex-wrap items-center justify-between text-xs text-gray-600 gap-2">
                  <span>{Math.round(uniquePercent)}% Complete</span>
                  {overflowPackedUniqueCount > 0 && (
                    <span className="text-amber-600 font-medium">
                      +{overflowPackedUniqueCount} buffer units packed
                    </span>
                  )}
                </div>
              </div>
            </div>

            <div className="bg-white border border-green-200 rounded-lg p-4 flex flex-col md:flex-row items-center gap-6">
              <DonutProgress value={overallProgressPercent} label={currentBatchProgress.is_complete ? 'Batch complete' : 'Overall progress'} />
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 w-full">
                <div className="rounded-lg border border-green-100 bg-green-50 p-3">
                  <p className="text-xs text-gray-600 uppercase tracking-wide">Master cases</p>
                  <p className="text-sm font-semibold text-green-800 mt-1">
                    {currentBatchProgress.packed_master_codes} of {currentBatchProgress.total_master_codes}
                  </p>
                  <p className="text-xs text-gray-500">{masterPercent}% packed</p>
                </div>
                <div className="rounded-lg border border-blue-100 bg-blue-50 p-3">
                  <p className="text-xs text-gray-600 uppercase tracking-wide">Unique units</p>
                  <p className="text-sm font-semibold text-blue-800 mt-1">
                    {displayedPackedUniqueCount} of {plannedUniqueCount}
                  </p>
                  <p className="text-xs text-gray-500">{Math.round(uniquePercent)}% packed</p>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
              <div className="bg-white rounded-lg p-3 border border-green-200">
                <p className="text-xs text-gray-600">Order</p>
                <p className="text-sm font-semibold text-gray-900">{currentBatchProgress.order_no}</p>
              </div>
              <div className="bg-white rounded-lg p-3 border border-green-200">
                <p className="text-xs text-gray-600">Packed Cases</p>
                <p className="text-sm font-semibold">
                  <span className="text-blue-600">{currentBatchProgress.packed_master_codes}</span>
                  <span className="text-gray-400"> / </span>
                  <span className="text-red-600">{currentBatchProgress.total_master_codes}</span>
                </p>
              </div>
              <div className="bg-white rounded-lg p-3 border border-green-200">
                <p className="text-xs text-gray-600">Packed Units</p>
                <p className="text-sm font-semibold">
                  <span className="text-blue-600">{displayedPackedUniqueCount}</span>
                  <span className="text-gray-400"> / </span>
                  <span className="text-red-600">{plannedUniqueCount}</span>
                </p>
                {overflowPackedUniqueCount > 0 && (
                  <p className="text-xs text-amber-600 mt-1 font-medium">
                    +{overflowPackedUniqueCount} buffer units packed
                  </p>
                )}
              </div>
              <div className="rounded-lg p-3 border border-amber-200 bg-amber-50">
                <p className="text-xs uppercase tracking-wide text-amber-700">Buffer QR Codes</p>
                <p className="text-sm font-semibold text-amber-900 mt-1">
                  {bufferUsedCount} / {bufferTotalCount} used
                </p>
                <p className="text-xs text-amber-700 mt-1">Available buffer: {bufferAvailableCount}</p>
              </div>
            </div>

            {/* Download Scan Summary Button */}
            <div className="flex flex-col gap-3">
              <div className="flex flex-col sm:flex-row gap-3 justify-end">
                <Button 
                  onClick={handleDownloadScanSummary}
                  disabled={downloadingExcel}
                  variant="outline"
                  className="gap-2"
                >
                  <Download className="h-4 w-4" />
                  {downloadingExcel ? 'Generating Excel...' : 'Download Scan Summary (Excel)'}
                </Button>

                <Button 
                  onClick={handleCompleteProduction}
                  disabled={completingProduction || isOrderLocked || masterPercent < 100}
                  variant="default"
                  className="gap-2 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                  title={masterPercent < 100 ? `Cannot complete: Only ${masterPercent}% packed. Must be 100% complete.` : 'Mark production as complete and ready for warehouse shipment'}
                >
                  <CheckCircle className="h-4 w-4" />
                  {completingProduction ? 'Completing...' : 'Production Complete - Ready to Ship'}
                </Button>
              </div>
              
              {masterPercent < 100 && !isOrderLocked && (
                <div className="flex justify-end">
                  <p className="text-sm text-amber-700 bg-amber-50 border border-amber-200 rounded-md px-3 py-2">
                    ⚠️ Complete all packing (100%) to mark production as ready for shipment. Current: {masterPercent}%
                  </p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {packingMode === 'scan_assign' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {uniqueScanCard}
          {manualLinkCard}
        </div>
      )}

      {packingMode === 'bulk_generate' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {uniqueScanCard}
          {bulkFinalizeCard}
        </div>
      )}

      {packingMode === 'plan_import' && (
        <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
          {planImportCard}
        </div>
      )}

      <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
        <Card>
          <CardHeader className="space-y-1">
            <CardTitle className="flex items-center gap-2">
              <History className="h-5 w-5" />
              Selected Order Scan History
            </CardTitle>
            <p className="text-sm text-gray-500">
              The latest master cases linked for the order chosen above.
            </p>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-wrap items-center justify-between gap-3">
              <div>
                {selectedOrder ? (
                  <p className="text-sm text-gray-600">
                    Showing {orderScanHistory.length} record{orderScanHistory.length === 1 ? '' : 's'} for the selected order.
                  </p>
                ) : (
                  <p className="text-sm text-gray-500">
                    Select an order to view its recent scan history.
                  </p>
                )}
              </div>
              <Button variant="outline" size="sm" onClick={loadScanHistory}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
            </div>
            <HistoryTable
              history={orderScanHistory}
              emptyTitle={selectedOrder ? 'No scans linked to this order yet' : 'No order selected'}
              emptyDescription={selectedOrder ? 'Link master cases for this order to see them appear here.' : 'Choose an order from the dropdown above to view its scans.'}
            />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <History className="h-5 w-5" />
                Overall Recent Scan History
              </CardTitle>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={async () => {
                    const response = await fetch('/api/manufacturer/debug-scan-history')
                    const data = await response.json()
                    console.log('🔍 DEBUG DATA:', data)
                    alert('Check console for debug info')
                  }}
                >
                  🐛 Debug
                </Button>
                <Button variant="outline" size="sm" onClick={loadScanHistory}>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Refresh
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <HistoryTable
              history={scanHistory}
              emptyTitle="No scan history yet"
              emptyDescription="Link master cases to start building history."
            />
          </CardContent>
        </Card>
      </div>

      {/* Master Code Detail Dialog */}
      <Dialog open={selectedMasterForDetail !== null} onOpenChange={(open) => !open && setSelectedMasterForDetail(null)}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Package className="h-5 w-5" />
              Master Case #{selectedMasterForDetail?.case_number} - Child QR Codes
            </DialogTitle>
            <DialogDescription>
              Master Code: <span className="font-mono font-semibold text-gray-900">{selectedMasterForDetail?.master_code}</span>
              <br />
              Total Units: <span className="font-semibold text-blue-600">{selectedMasterForDetail?.unique_codes_count}</span>
              {' | '}
              Batch: <span className="font-semibold">{selectedMasterForDetail?.batch_code}</span>
              {' | '}
              Order: <span className="font-semibold">{selectedMasterForDetail?.order_no}</span>
            </DialogDescription>
          </DialogHeader>

          {loadingChildCodes ? (
            <div className="flex items-center justify-center py-12">
              <RefreshCw className="h-8 w-8 animate-spin text-blue-600" />
              <span className="ml-3 text-gray-600">Loading child QR codes...</span>
            </div>
          ) : (
            <div className="mt-4">
              {masterChildCodes.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <QrCode className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                  <p>No child QR codes found</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="border-b-2 border-gray-300 bg-gray-100">
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">#</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Child QR Code</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Scanned At</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {masterChildCodes.map((code, index) => (
                        <tr key={code.id} className="hover:bg-gray-50">
                          <td className="py-3 px-4 text-sm text-gray-600">{index + 1}</td>
                          <td className="py-3 px-4 font-mono text-xs text-gray-900">{code.code}</td>
                          <td className="py-3 px-4">
                            {code.status === 'packed' ? (
                              <Badge variant="default" className="bg-green-600">
                                <CheckCircle className="h-3 w-3 mr-1" />
                                Packed
                              </Badge>
                            ) : (
                              <Badge variant="secondary">{code.status || 'Pending'}</Badge>
                            )}
                          </td>
                          <td className="py-3 px-4 text-sm text-gray-600">
                            {code.last_scanned_at ? new Date(code.last_scanned_at).toLocaleString() : '-'}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  
                  <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-800">
                      <strong>Summary:</strong> This master case contains {masterChildCodes.length} child QR code{masterChildCodes.length !== 1 ? 's' : ''}.
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
